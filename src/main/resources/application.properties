# ===============================
# = DATA SOURCE
# ===============================
## Server port to run
server.port=8800

#===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url =jdbc:postgresql://localhost:5454/datafitness
#date zone UTC
# MyUsername and password
spring.datasource.username =postgres
spring.datasource.password =root1234

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Show or not log for each sql query
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database=POSTGRESQL
#spring.jpa.database=MYSQL
spring.datasource.platform=postgres
spring.jpa.hibernate.ddl-auto =  update

# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jackson.serialization.fail-on-empty-beans=false
# Allows Hibernate to generate SQL optimized for a particular DBMS

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.use-new-id-generator-mappings = false


logging.level.org.hibernate.type=TRACE
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
#spring.queries.MyUsers-query=select email, password, active from MyUser where email=?
#spring.queries.roles-query=select u.email, r.role from MyUser u inner join MyUser_role ur on(u.MyUser_id=ur.MyUser_id) inner join role r on(ur.role_id=r.role_id) where u.email=?


# ===============================
# = Application Information
# ===============================
app.name=@project.name@
app.version=@project.version@
app.description=@project.description@
spring.application.name=okito


# ===============================
# = DEV TOOLS
# ===============================
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true




# App spring security properties 
#spring.security.user.name=admin
#spring.security.user.password=password

# MAIL Properties

email.support=villa.nahla@gmail.com
spring.mail.host=smtp.gmail.com
spring.mail.username=villa.nahla@gmail.com
spring.mail.password=Bricevilla75
spring.mail.properties.mail.smtp.auth=false
spring.mail.properties.mail.smtp.socketFactory.port=465
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.smtp.socketFactory.fallback=false


#spring.queries.MyUsers-query=select  ut.email , ut.MyUsername , ut.active from public.utilisateurs as ut where ut.email=?
#spring.queries.roles-query=select  ut.email , r.rolename   from public.utilisateurs as ut inner join public.utilisateur_role  as ur on ur.utilisateur_id = ut.id  inner join public.role as r  on r.id = ur.utilisateur_id where ut.email = ?


okito.app.jwtExpiration= 864000000
okito.app.jwtSecret=okitoSecret

# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
#spring.queries.users-query=select email, password, active from user where email=?
#spring.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?
# ==============================================================
# = Spring Security
# ==============================================================

#server.ssl.key-alias=selfsigned
#server.ssl.key-password=test123
#server.ssl.key-store=classpath:keystore.jks
#server.ssl.key-store-provider=SUN
#server.ssl.key-store-type=JKS
## ==============================================================
# = Keys Captcha
# ==============================================================
 ## captcha w
google.recaptcha.site.key=6Lfoo90UAAAAAGK6xBtrnFdXXlY8nQm87YSMX1hc
google.recaptcha.secret.key=6Lfoo90UAAAAAEpDQxbkcWd6jAVs7c7L3oA8B3XP
# ----------------------------------------
# SECURITY PROPERTIES
# ----------------------------------------
# SECURITY (SecurityProperties)
security.basic.path=/**
security.enable-csrf=false
security.filter-order=0
security.headers.cache=true
security.headers.content-type=true
security.headers.frame=true
security.headers.xss=true
endpoints.jmx.domain=spring.jmx.default-domain


spring.thymeleaf.cache=false
flyway.baseline-on-migrate=true